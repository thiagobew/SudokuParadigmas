(defconstant sudokuSize 4)
(defconstant nSquare 2)

(defconstant row1size4 ".<>.|..<>|.<<.|..>>|")
(defconstant row2size4 "<<..|>..>|>>..|<..<|")
(defconstant row3size4 ".>>.|..<<|.<<.|..>>|")
(defconstant row4size4 "<>..|>..<|>>..|<..<|")

(defconstant row1size9 ".<>.|.><>|..<<|.<>.|.<>>|..>>|.><.|.>><|..<<|")
(defconstant row2size9 "<<<.|><<>|>.<>|<<<.|<>>>|<.><|>>>.|<<><|>.>>|")
(defconstant row3size9 "><..|><.>|>..>|><..|<>.>|<..<|<>..|<<.<|<..>|")
(defconstant row4size9 ".>>.|.><<|..<<|.>>.|.<><|..>>|.<<.|.>>>|..<<|")
(defconstant row5size9 "<>>.|><<<|>.<>|<><.|<<<<|<.>>|>>>.|<>><|>.><|")
(defconstant row6size9 "<<..|>>.>|>..<|><..|>>.>|<..<|<>..|<<.<|<..>|")
(defconstant row7size9 ".<>.|.>>>|..><|.><.|.>><|..><|.<<.|.><>|..<<|")
(defconstant row8size9 "<><.|<<<<|<.>>|>>>.|<<><|<.<>|><>.|><<>|>.>>|")
(defconstant row9size9 "><..|>>.>|<..<|<<..|<<.>|>..>|<<..|>>.>|<..<|")

(defun allRows (size)
  (cond ((= size 9) (list row1size9 row2size9 row3size9 row4size9 row5size9 row6size9 row7size9 row8size9 row9size9))
        ((= size 4) (list row1size4 row2size4 row3size4 row4size4)))
)

(defun getSudokuGrid (size)
  (let ((grid (make-array (list size size) :initial-element 0))) grid)
)

(defun getX (l pos)
  (if (null? l)
      (error "getX: list is empty")
      (if (= pos 0)
          (car l)
          (getX (cdr l) (- pos 1))))
)

(defun setX (l pos x)
  (cond ((null l) ())
        ((= pos 0) (cons x (cdr l)))
        (t (cons (car l) (setX (cdr l) (- pos 1) x))))
)

(defun getXY (l x y)
  (getX (getX l y) x)
)

(defun setXY (l x y value)
  (setX l y (setX (getX l y) x value))
)

(defun filter (f lista)
  (if (null lista)
    ()
    (if (funcall f (car lista))
      (cons (car lista) (filter f (cdr lista)))
      (filter f (cdr lista))
    )
  )
)

(defun map (f lista)
  (if (null lista)
    ()
    (cons (funcall f (car lista)) (map f (cdr lista)))
  )
)

(defun main ()
  (print (getSudokuGrid sudokuSize))
)

(main)