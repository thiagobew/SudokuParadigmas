(defun getX (l x)
  (cond ((null l) ())
        ((= (car l) x) (car l))
        (t (getX (cdr l) x)))
)

(defun setX (l pos x)
  (cond ((null l) ())
        ((= pos 0) (cons x (cdr l)))
        (t (cons (car l) (setX (cdr l) (- pos 1) x))))
)

(defun filter (f lista)
  (if (null lista)
    ()
    (if (funcall f (car lista))
      (cons (car lista) (filter f (cdr lista)))
      (filter f (cdr lista))
    )
  )
)

(defun main ()
  (print (getX '(1 2 3 4 5) 2))
  (print (setX '(1 2 3 4 5) 2 10))
  (print (filter (lambda (x) (= (mod x 2) 0)) '(1 2 3 4 5 6 7 8 9 10)))
)

(main)